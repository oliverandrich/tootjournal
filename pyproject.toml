[tool.poetry]
name = "tootjournal"
version = "0.1.0"
description = ""
authors = ["Oliver Andrich <oliver@andrich.me>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
mastodon-py = "^1.8.1"


[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Black
[tool.black]
target-version = ["py311"]
line-length = 100
exclude = '''
/(
    \.git
  | \.tox
  | \.venv
  | _build
  | build
  | dist
  | ^.*\b(migrations)\b.*$
)/
'''

# Pyright
[tool.pyright]
pythonVersion = "3.11"
typeCheckingMode = "strict"
venvPath = ".venv"
venv = "."

# Ruff
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DJ",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105",
    "S106",
    "S107",
    # Ignore complexity
    "C901",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
]
unfixable = [
    # Don't touch unused imports
    "F401",
    # Don't touch unused variables
    "F841",
]

[tool.ruff.isort]
known-first-party = ["tootjournal"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]
"tests/snapshots/*" = ["ALL"]

# Coverage
[tool.coverage.run]
source = ["tootjournal", "tests"]
branch = true

[tool.coverage.paths]
source = ["src", ".tox/**/site-packages"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
